Interview questions:
- Difference between the compiler, interpreter and JIT compiler?
    Compiler: converts source code to machine code for the whole program so that the machine code can be run.
        Does not tell the programmer about errors in code but instead just continues to execute.
    Interpreter: Runs code line by line interpreting it as machine code as it goes. Can notice errors when they
        are encountered and notify the programmer. Slower than the compiler
    JIT Compiler: A mix of Compiler and Interpreter. Not as fast as full compiler but faster than Interpreter.
        Converts code as it goes and can point out errors when they occur.

Java:
    Open source, robust, has been in the market for more than 25 years.
    Object oriented strongly typed platform independent language.
To run a java program you just get the program to:
    Compile: 'javac piggybank.java' -> compile program -> .java => .class(bytecode) not machine readable code
    Make a jar file:
    Execute: 'java piggybank' -> .bytecode(.class) => (JVM) => .machine readable code => processor(execute)

Java Runtime Environment(JRE): JVM + Library Classes
    Includes the JVM. Used to run Java program. Doesn't include any development tools

Java Virtual Machine(JVM)
    A virtual machine that runs on your computer and is used to run the code that has been written.
    How a JVM works:
                JVM Language Classes ->   | Class Loader |
                JVM Memory:                       |
            | Method Area | Heap | JVM Language Stacks | PC Registers | Native Method Stacks |
                    |
            | Execution Engine <-> Native Method Interface <-> Native Method Libraries |

Java Development Kit(JDK): JRE + Development tools
    The kit used to create Java programs. It's the tools that take java source code and converts it to
    the code that the JVM and JRE can understand.
        includes debuggers and the Java compiler



Left off at 1:22

Object Oriented Programming System(OOPS):
    Classes and Objects:
        Classes are a collection of member variables and member methods. A class doesn't have any properties
            without an object
        Objects are a representation of the class that can have information to give the variables meaning
    Encapsulation:
        binding code and data
    Abstraction:
        hiding internal functionality and only showing only required information
    Inheritance: single and multi-level inheritance are both supported. Multiple inheritance is not supported
        Extends - inheritance of full classes
        Implements - inheritance of interfaces where you define the functionality
    Polymorphism:
        Runtime Polymorphism: overriding, late binding
            replaces functionality of the method by name. same method name, same signature
        Compile time Polymorphism: overloading, static early binding
            same method name, different signature

Static blocks and instance blocks: code that will run whenever certain actions are made.
    Static block: executes when the class is created at runtime.
    Instance block: executes whenever an instance is created

Injection in java:
    Constructor injection:
        gives an object properties in the constructor when the object is created.
    Setter injection:
        gives the object properties individually with setter methods

Diamond issue: ambiguity in inheritance where inheritance isn't clear when using multiple inheritance

Interface and Abstract class:
    Interface:
        has no implementation
    Abstract class:
        can have some implementation

Marker Interface: tells the JVM there is additional information about the object