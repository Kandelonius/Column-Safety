Interview questions:
- Difference between the compiler, interpreter and JIT compiler?
    Compiler: converts source code to machine code for the whole program so that the machine code can be run.
        Does not tell the programmer about errors in code but instead just continues to execute.
    Interpreter: Runs code line by line interpreting it as machine code as it goes. Can notice errors when they
        are encountered and notify the programmer. Slower than the compiler
    JIT Compiler: A mix of Compiler and Interpreter. Not as fast as full compiler but faster than Interpreter.
        Converts code as it goes and can point out errors when they occur.

Session 1 7/16/2020 - Java Basics

Java:
    Open source, robust, has been in the market for more than 25 years.
    Object oriented strongly typed platform independent language.
To run a java program you just get the program to:
    Compile: 'javac piggybank.java' -> compile program -> .java => .class(bytecode) not machine readable code
    Make a jar file:
    Execute: 'java piggybank' -> .bytecode(.class) => (JVM) => .machine readable code => processor(execute)

Java Runtime Environment(JRE): JVM + Library Classes
    Includes the JVM. Used to run Java program. Doesn't include any development tools

Java Virtual Machine(JVM)
    A virtual machine that runs on your computer and is used to run the code that has been written.
    How a JVM works:
                JVM Language Classes ->   | Class Loader |
                JVM Memory:                       |
            | Method Area | Heap | JVM Language Stacks | PC Registers | Native Method Stacks |
                    |
            | Execution Engine <-> Native Method Interface <-> Native Method Libraries |

Java Development Kit(JDK): JRE + Development tools
    The kit used to create Java programs. It's the tools that take java source code and converts it to
    the code that the JVM and JRE can understand.
        includes debuggers and the Java compiler

Java hierarchy:
    packages -> libraries -> classes & interfaces -> members variables and member methods

Variables: In java must be declared with a type and must be unique. Can be local or global.
    Types:
        Value: zero index, stored on the stack
        Reference:

Data-types:
    Primitive:
        Integer: byte(1 byte), short(2 bytes), int(4 bytes), long(8 bytes)
        Floating point: float(4 bytes), double(8 bytes)
        Character: char(2 bytes)
        Boolean: boolean(size appears to be VM dependant)
    non-Primitive:
        Classes:
        Interfaces:
        Arrays:
        Strings:


Left off at 2:00

Session 3 7/26/2020 - OOPS

Object Oriented Programming System(OOPS):
    Classes and Objects:
        Classes are a collection of member variables and member methods. A class doesn't have any properties
            without an object
        Objects are a representation of the class that can have information to give the variables meaning
    Encapsulation:
        binding code and data
    Abstraction:
        hiding internal functionality and only showing only required information
    Inheritance: single and multi-level inheritance are both supported. Multiple inheritance is not supported
        Extends - inheritance of full classes
        Implements - inheritance of interfaces where you define the functionality
        Diamond issue - the issue where multiple inheritance causes a conflict when a class inherits a member with
            the same name but different implementation.

    Polymorphism:
        Runtime Polymorphism: overriding, late binding
            replaces functionality of the method by name. same method name, same signature
        Compile time Polymorphism: overloading, static early binding
            same method name, different signature

Static blocks and instance blocks: code that will run whenever certain actions are made.
    Static block: executes when the class is created at runtime. All members are stored on the stack
    Instance block: executes whenever an instance is created

Injection in java:
    Constructor injection:
        gives an object properties in the constructor when the object is created.
    Setter injection:
        gives the object properties individually with setter methods

Diamond issue: ambiguity in inheritance where inheritance isn't clear when using multiple inheritance

Interface and Abstract class:
    Interface:
        has no implementation. All variables should be public static final.
    Abstract class:
        can have some implementation

Marker Interface: tells the JVM there is additional information about the object

Session 4 7/27/2020 - Exceptions

Exceptions and errors:
    Errors - anything that will interrupt the flow of the program in an unwanted way
        Compile time errors: errors that will prevent the code for even running
        Runtime errors: errors that will terminate the program if not handled
    Exceptions - a runtime error that can be handled
        Checked exception: an error the developer handles ie in a try-catch block
        Unchecked exception: an error the developer didn't handle the JVM stop the program and display the exception

Exception prevention strategies:
    Look Before You Leap(LBYL):
        refers to ensuring your variables will be valid and usable before attempting to use them.
        uses if else to check values.
    Easy To Ask For Forgiveness and Permission(EAFP):
        uses try catch to check if the values are usable before the program crashes.

Exception meanings:
    concurrentModificationException: more than one thread is trying to manipulate a piece of data at the same time
    nullPointerException: pointing to a location that is null and trying to do something to the data there


Exception hierarchy:             | Throwable |
                                   /       \
                             | error |   | Exception |
                                           /       \
                                   | runtime |   | compile time |

Try-catch:
    Try: holds the code to be checked. A Catch block is mandatory.
    Catch: handles what the developer wants done after an exception is discovered. Can have multiple catch blocks
        catch can have multiple exceptions checked at one time.
    Finally: closes anything that was opened during the block.

Throw and Throws: Should be used together
    Throw - the developer can decide to stop the program using throw even if the code wouldn't normally stop the
        program. Used inside the method
    Throws - used at the beginning of a method in the method signature

Custom exceptions: Extend the Exception class

Session 5 7/28/2020 - Collections

Lists:
    When declaring a list or list  subtype(ArrayList, LinkedList) it is useful to declare it as
        "List li = new ArrayList"
    When using a generic list type the elements will be stored as objects and if we want to store an element
        in another type of variable such as int you must type cast it.
    There are several ways to traverse items in collections using pre-built methods. Can use for, foreach, while loops
        as well as Iterator and Enumerable.
    Lists can be used to store custom class type objects ie "List<Person> p = new ArrayList<>();" will store a list of
        type Person

Sorting collections:
    Comparator:

ArrayList vs Vector:
                ArrayList                                       Vector
    not legacy                              |   legacy
    not thread safe                         |   thread safe - synchronized(lock ofer a process)
    high performance                        |   low performance
    not synchronized                        |   synchronized

Deque:
    deque - removes from queue at the end
    peek - return the element doesn't remove from queue
    pop - removes from the queue

Set:
    Has similar methods as List including size() add() remove() etc.
    Does not allow duplicates, if duplicates are found it will ignore the extra ones
    Does not sort the data without extra methods, TreeSet will sort automatically

Map: extends serializable
    uses key-value pairs, does not allow duplicate keys
    key can be a collection type as can value.
    uses put() instead add()